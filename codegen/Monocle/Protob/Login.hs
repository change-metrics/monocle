{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoGeneralisedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Protob.Login where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype LoginValidationRequest = LoginValidationRequest
  { loginValidationRequestUsername ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named LoginValidationRequest where
  nameOf _ = (Hs.fromString "LoginValidationRequest")

instance HsProtobuf.HasDefault LoginValidationRequest

instance HsProtobuf.Message LoginValidationRequest where
  encodeMessage
    _
    LoginValidationRequest
      { loginValidationRequestUsername =
          loginValidationRequestUsername
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                loginValidationRequestUsername
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure LoginValidationRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "username")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB LoginValidationRequest where
  toJSONPB (LoginValidationRequest f1) =
    (HsJSONPB.object ["username" .= f1])
  toEncodingPB (LoginValidationRequest f1) =
    (HsJSONPB.pairs ["username" .= f1])

instance HsJSONPB.FromJSONPB LoginValidationRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "LoginValidationRequest"
        (\obj -> (Hs.pure LoginValidationRequest) <*> obj .: "username")
    )

instance HsJSONPB.ToJSON LoginValidationRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON LoginValidationRequest where
  parseJSON = HsJSONPB.parseJSONPB

newtype LoginValidationResponse = LoginValidationResponse
  { loginValidationResponseResult ::
      Hs.Maybe LoginValidationResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named LoginValidationResponse where
  nameOf _ = (Hs.fromString "LoginValidationResponse")

instance HsProtobuf.HasDefault LoginValidationResponse

instance HsProtobuf.Message LoginValidationResponse where
  encodeMessage
    _
    LoginValidationResponse
      { loginValidationResponseResult =
          loginValidationResponseResult
      } =
      ( Hs.mconcat
          [ case loginValidationResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  LoginValidationResponseResultValidationResult y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        (HsProtobuf.ForceEmit y)
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure LoginValidationResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  ( Hs.pure
                      (Hs.Just Hs.. LoginValidationResponseResultValidationResult)
                  )
                    <*> HsProtobuf.decodeMessageField
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB LoginValidationResponse where
  toJSONPB (LoginValidationResponse f1) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1 of
                      Hs.Just (LoginValidationResponseResultValidationResult f1) ->
                        (HsJSONPB.pair "validation_result" f1)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (LoginValidationResponse f1) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1 of
                      Hs.Just (LoginValidationResponseResultValidationResult f1) ->
                        (HsJSONPB.pair "validation_result" f1)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB LoginValidationResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "LoginValidationResponse"
        ( \obj ->
            (Hs.pure LoginValidationResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. LoginValidationResponseResultValidationResult
                                <$> (HsJSONPB.parseField parseObj "validation_result"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON LoginValidationResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON LoginValidationResponse where
  parseJSON = HsJSONPB.parseJSONPB

data LoginValidationResponse_ValidationResult
  = LoginValidationResponse_ValidationResultUnknownIdent
  | LoginValidationResponse_ValidationResultKnownIdent
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named LoginValidationResponse_ValidationResult where
  nameOf _ =
    (Hs.fromString "LoginValidationResponse_ValidationResult")

instance
  HsProtobuf.HasDefault
    LoginValidationResponse_ValidationResult

instance Hs.Bounded LoginValidationResponse_ValidationResult where
  minBound = LoginValidationResponse_ValidationResultUnknownIdent
  maxBound = LoginValidationResponse_ValidationResultKnownIdent

instance Hs.Ord LoginValidationResponse_ValidationResult where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance
  HsProtobuf.ProtoEnum
    LoginValidationResponse_ValidationResult
  where
  toProtoEnumMay 0 =
    Hs.Just LoginValidationResponse_ValidationResultUnknownIdent
  toProtoEnumMay 1 =
    Hs.Just LoginValidationResponse_ValidationResultKnownIdent
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum
    (LoginValidationResponse_ValidationResultUnknownIdent) = 0
  fromProtoEnum (LoginValidationResponse_ValidationResultKnownIdent) =
    1

instance HsJSONPB.ToJSONPB LoginValidationResponse_ValidationResult where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance
  HsJSONPB.FromJSONPB
    LoginValidationResponse_ValidationResult
  where
  parseJSONPB (HsJSONPB.String "UnknownIdent") =
    Hs.pure LoginValidationResponse_ValidationResultUnknownIdent
  parseJSONPB (HsJSONPB.String "KnownIdent") =
    Hs.pure LoginValidationResponse_ValidationResultKnownIdent
  parseJSONPB v =
    ( HsJSONPB.typeMismatch
        "LoginValidationResponse_ValidationResult"
        v
    )

instance HsJSONPB.ToJSON LoginValidationResponse_ValidationResult where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON LoginValidationResponse_ValidationResult where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite LoginValidationResponse_ValidationResult

data LoginValidationResponseResult
  = LoginValidationResponseResultValidationResult
      ( HsProtobuf.Enumerated
          Monocle.Protob.Login.LoginValidationResponse_ValidationResult
      )
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named LoginValidationResponseResult where
  nameOf _ = (Hs.fromString "LoginValidationResponseResult")
